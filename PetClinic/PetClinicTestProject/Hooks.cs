// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
using SeleniumExtras.WaitHelpers;
using Microsoft.Extensions.Configuration;
using NUnit.Framework.Interfaces;
using Allure.Commons;
using NUnit.Allure.Core;
using NUnit.Allure.Steps;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Safari;

namespace PetClinicTestProject
{ 
    public enum BrowserType {
        Chrome,
        Firefox,
    }

    public class Hooks: TestBase {
        private BrowserType browserType;

        public Hooks(BrowserType browser) {
            browserType = browser;
        }

        [SetUp]
        public void SetUp()
        {
            GetTestData();
            // driver = new ChromeDriver();
            ChooseBrowser(browserType);
            BaseUrl = "http://20.50.171.10:8080";
            driver.Navigate().GoToUrl(BaseUrl);
            driver.Manage().Window.Size = new System.Drawing.Size(1440, 817);
            pages = new Pages(driver);
        }

        public void ChooseBrowser(BrowserType browser) {
            Dictionary<string, object> additionalSelenoidCapabilities = new Dictionary<string, object>();            additionalSelenoidCapabilities["name"] = "Pi-59(1) lab 6 variant 6";            
            additionalSelenoidCapabilities["enableVNC"] = true;
            switch (browser) 
            {
                case BrowserType.Chrome: 
                    var chrome_options = new ChromeOptions();                    
                    chrome_options.AddAdditionalOption("selenoid:options", additionalSelenoidCapabilities);
                    driver = new RemoteWebDriver(new Uri("http://localhost:4444/wd/hub"), chrome_options.ToCapabilities());
                    break;
                case BrowserType.Firefox: 
                var firefox_options = new ChromeOptions();                    
                    firefox_options.AddAdditionalOption("selenoid:options", additionalSelenoidCapabilities);
                    driver = new RemoteWebDriver(new Uri("http://localhost:4444/wd/hub"), firefox_options.ToCapabilities());
                    break;
                default: 
                    driver = new ChromeDriver();
                    break;
            }
        }
    }
}